unit uConsultaCep;

interface

uses
  System.JSON, uConsultaCep.Interfaces, uConsultaCep.Persistencia;

type
  TCepService = class(TInterfacedObject, iCepService)
  constructor Create(pPrimary, pSecondary, pTertiary: ICepService; pCepRepository: TCepRepository);
  private
    FPrimaryService: ICepService;
    FSecondaryService: ICepService;
    FTertiaryService: ICepService;
    FCepRepository: TCepRepository;
  public
    function GetCepInfo(const pCEP: string): TJSONObject;
    procedure SaveCepInfoToDatabase(const pCepData: TJSONObject);
  end;

implementation

uses
  IdHTTP, IdSSLOpenSSL, SysUtils;

constructor TCepService.Create(pPrimary, pSecondary, pTertiary: ICepService; pCepRepository: TCepRepository);
begin
  FPrimaryService   := pPrimary;
  FSecondaryService := pSecondary;
  FTertiaryService  := pTertiary;
  FCepRepository    := pCepRepository;
end;

  { TCepService }

function TCepService.GetAPICEP(const pCEP: string): TJSONObject;
var
  lHTTP: TIdHTTP;
  lSSL: TIdSSLIOHandlerSocketOpenSSL;
  lResponse: string;
begin
  lHTTP := TIdHTTP.Create(nil);
  lSSL := TIdSSLIOHandlerSocketOpenSSL.Create(nil);
  try
    lHTTP.IOHandler := lSSL;
    lResponse := lHTTP.Get('https://apicep.com/api/cep/' + pCEP + '/json/');
    Result := TJSONObject.ParseJSONValue(lResponse) as TJSONObject;
  finally
    lSSL.Free;
    lHTTP.Free;
  end;

end;

function TCepService.GetAwesomeAPI(const pCEP: string): TJSONObject;
var
  lHTTP: TIdHTTP;
  lSSL: TIdSSLIOHandlerSocketOpenSSL;
  lResponse: string;
begin
  lHTTP := TIdHTTP.Create(nil);
  lSSL := TIdSSLIOHandlerSocketOpenSSL.Create(nil);
  try
    lHTTP.IOHandler := lSSL;
    lResponse := lHTTP.Get('https://cep.awesomeapi.com.br/json/' + pCEP );
    Result := TJSONObject.ParseJSONValue(lResponse) as TJSONObject;
  finally
    lSSL.Free;
    lHTTP.Free;
  end;

end;

function TCepService.GetViaCepInfo(const pCEP: string): TJSONObject;
var
  lHTTP: TIdHTTP;
  lSSL: TIdSSLIOHandlerSocketOpenSSL;
  lResponse: string;
begin
  lHTTP := TIdHTTP.Create(nil);
  lSSL := TIdSSLIOHandlerSocketOpenSSL.Create(nil);
  try
    lHTTP.IOHandler := lSSL;
    lResponse := lHTTP.Get('https://viacep.com.br/ws/' + pCEP + '/json/');
    Result := TJSONObject.ParseJSONValue(lResponse) as TJSONObject;
  finally
    lSSL.Free;
    lHTTP.Free;
  end;
end;


end.
